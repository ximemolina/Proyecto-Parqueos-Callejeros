package com.mycompany.proyectoparqueos;

import java.util.ArrayList;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import java.io.File;
import java.io.FileNotFoundException;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 *
 * @author ximen
 */
public class MenuRevisarParqueo extends javax.swing.JFrame {
    Parqueo parqueo;
    Inspector inspector;
    EspacioDeParqueo espacioSeleccionado;
    private String placaSeleccionada;
    /**
     * Creates new form MenuRevisarParqueo
     * @param inspector
     * @param parqueo
     */
    public MenuRevisarParqueo(Inspector inspector, Parqueo parqueo) {
        initComponents();
        setInspector(inspector);
        setParqueo(parqueo);
        llenarComboBoxEspaciosOcupados();
    }
    
    /**
     *
     * @param parqueo
     */
    public void setParqueo(Parqueo parqueo){
        this.parqueo = parqueo;
    }
    
    /**
     *
     * @param inspector
     */
    public void setInspector(Inspector inspector){
        this.inspector = inspector;
    }
    
    /**
     *
     * @param espacioSeleccionado
     */
    public void setEspacioSeleccionado(EspacioDeParqueo espacioSeleccionado){
        this.espacioSeleccionado = espacioSeleccionado;
    }
    
    private void llenarComboBoxEspaciosOcupados() {
        comboBoxEspaciosOcupados.removeAllItems(); // Limpiar el comboBox antes de llenarlo

        // Obtener la lista de espacios del parqueo
        ArrayList<EspacioDeParqueo> espaciosParqueo = parqueo.getEspaciosParqueo();

        // Recorrer los espacios y agregar solo los que est√°n ocupados al comboBox
        for (EspacioDeParqueo espacio : espaciosParqueo) {
            if (espacio.getCarro() != null) { // Si hay un carro en el espacio
                comboBoxEspaciosOcupados.addItem(String.valueOf(espacio.getNumeroEspacio()));
            }
        }

        // Verificar si no hay espacios ocupados
        if (comboBoxEspaciosOcupados.getItemCount() == 0) {
            comboBoxEspaciosOcupados.addItem("No hay espacios ocupados");
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelCarro = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelEstadoPago = new javax.swing.JLabel();
        comboBoxEspaciosOcupados = new javax.swing.JComboBox<>();
        btnMultar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabelCarro.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabelCarro.setForeground(new java.awt.Color(255, 255, 255));
        jLabelCarro.setText("Carro:");

        jLabel3.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("REVISAR PARQUEO");

        jLabel4.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Espacio de Parqueo:");

        jLabelEstadoPago.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabelEstadoPago.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEstadoPago.setText("Estado de pago del espacio:");

        comboBoxEspaciosOcupados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxEspaciosOcupados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxEspaciosOcupadosActionPerformed(evt);
            }
        });

        btnMultar.setText("MULTAR");
        btnMultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultarActionPerformed(evt);
            }
        });

        btnVolver.setBackground(new java.awt.Color(204, 204, 204));
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelEstadoPago)
                            .addComponent(jLabelCarro)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(btnMultar, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnVolver))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(comboBoxEspaciosOcupados, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(242, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(218, 218, 218)
                    .addComponent(jLabel3)
                    .addContainerGap(237, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(jLabel4)
                    .addContainerGap(409, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVolver)
                .addGap(72, 72, 72)
                .addComponent(comboBoxEspaciosOcupados, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabelCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelEstadoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(btnMultar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(454, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(102, 102, 102)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(381, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxEspaciosOcupadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxEspaciosOcupadosActionPerformed
        String espacioSeleccionadoStr = (String) comboBoxEspaciosOcupados.getSelectedItem();
    
        // Verifica si se seleccion√≥ un espacio v√°lido
        if (espacioSeleccionadoStr != null && !espacioSeleccionadoStr.equals("No hay espacios ocupados")) {
            int numeroEspacioSeleccionado = Integer.parseInt(espacioSeleccionadoStr);

            // Buscar el espacio correspondiente en el parqueo
            espacioSeleccionado = null;  // Aseg√∫rate de que el atributo espacioSeleccionado est√© limpio
            for (EspacioDeParqueo espacio : parqueo.getEspaciosParqueo()) {
                if (espacio.getNumeroEspacio() == numeroEspacioSeleccionado) {
                    espacioSeleccionado = espacio;  // Asignamos el valor al atributo
                    break;
                }
            }

            // Si se encuentra el espacio seleccionado
            if (espacioSeleccionado != null) {
                Carro carroEnEspacio = espacioSeleccionado.getCarro();

                // Mostrar la informaci√≥n del carro en la etiqueta
                if (carroEnEspacio != null) {
                    placaSeleccionada = carroEnEspacio.getPlaca();  // Asignamos el valor al atributo
                    jLabelCarro.setText("Placa: " + carroEnEspacio.getPlaca() +
                                        ", Marca: " + carroEnEspacio.getMarca() +
                                        ", Modelo: " + carroEnEspacio.getModelo());
                } else {
                    placaSeleccionada = null;  // No hay carro, la placa seleccionada se pone en null
                    jLabelCarro.setText("Sin carro en el espacio");
                }

                // Mostrar el estado de pago del espacio
                String estadoPago = espacioSeleccionado.getEstadoPago() ? "Pagado" : "No pagado";
                jLabelEstadoPago.setText("Estado de pago del espacio: " + estadoPago);
            }
        }
    }//GEN-LAST:event_comboBoxEspaciosOcupadosActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        MenuInspector pantalla = new MenuInspector(inspector, parqueo);
        pantalla.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnMultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultarActionPerformed
        String espacioSeleccionadoStr = (String) comboBoxEspaciosOcupados.getSelectedItem();
        if (espacioSeleccionadoStr != null && !espacioSeleccionadoStr.equals("No hay espacios ocupados")) {
            int numeroEspacioSeleccionado = Integer.parseInt(espacioSeleccionadoStr);

            // Buscar el espacio correspondiente
            EspacioDeParqueo espacioSeleccionado = null;
            for (EspacioDeParqueo espacio : parqueo.getEspaciosParqueo()) {
                if (espacio.getNumeroEspacio() == numeroEspacioSeleccionado) {
                    espacioSeleccionado = espacio;
                    break;
                }
            }

            // Si encontramos el espacio seleccionado
            if (espacioSeleccionado != null) {
                Carro carroEnEspacio = espacioSeleccionado.getCarro();
                if (carroEnEspacio != null) {
                    inspector.multar(parqueo, espacioSeleccionado, carroEnEspacio.getPlaca());

                    // Generar PDF con detalles de la multa
                    try {
                        File archivoPDF = new File("multa_" + carroEnEspacio.getPlaca() + ".pdf");
                        generarPDFMulta(archivoPDF, espacioSeleccionado, carroEnEspacio); 

                        // Buscar el correo del cliente usando la placa del carro
                        File archivoClientes = new File("Cliente.txt"); // Ruta al archivo de clientes
                        String correoCliente = buscarCorreoPorPlaca(carroEnEspacio.getPlaca(), archivoClientes);

                        if (correoCliente != null && !correoCliente.isEmpty()) {
                            // Enviar el correo con el archivo adjunto
                            Correo correo = new Correo("juanpacamal08@gmail.com", "adqs eueu mrbs vngz", "smtp.gmail.com");
                            String asunto = "Detalles de la Multa";
                            String cuerpo = "Se ha generado una multa para el veh√≠culo con placa " + carroEnEspacio.getPlaca();
                            correo.enviarCorreoConAdjunto(correoCliente, asunto, cuerpo, archivoPDF);

                            JOptionPane.showMessageDialog(null, "Multa generada y enviada por correo.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Error: No se pudo encontrar el correo del cliente.", "Error", JOptionPane.ERROR_MESSAGE);
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error al generar el PDF o enviar el correo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                } else {
                    System.out.println("No hay un carro en este espacio.");
                }
            }
        } else {
            System.out.println("Error: No se ha seleccionado un espacio v√°lido.");
        }
        MenuInspector pantalla = new MenuInspector(inspector, parqueo);
        pantalla.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnMultarActionPerformed
    
    private void generarPDFMulta(File archivoPDF, EspacioDeParqueo espacio, Carro carro) throws FileNotFoundException {
        // Inicializar el PDF Writer
        PdfWriter writer = new PdfWriter(archivoPDF);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);

        // Agregar contenido al PDF
        document.add(new Paragraph("Reporte de Multa"));
        document.add(new Paragraph("Carro con placa: " + carro.getPlaca()));
        document.add(new Paragraph("Marca: " + carro.getMarca()));
        document.add(new Paragraph("Modelo: " + carro.getModelo()));
        document.add(new Paragraph("Espacio: " + espacio.getNumeroEspacio()));
        document.add(new Paragraph("Fecha de Multa: " + java.time.LocalDateTime.now()));
        document.add(new Paragraph("Descripci√≥n de la Multa: Su veh√≠culo se encuentra parqueado en un espacio que no ha sido pagado."));

        // Cerrar el documento
        document.close();
    }
    
    public String buscarCorreoPorPlaca(String placa, File archivoClientes) {
    try (BufferedReader reader = new BufferedReader(new FileReader(archivoClientes))) {
        String linea;
        while ((linea = reader.readLine()) != null) {
            String[] datos = linea.split(",");

            // Verificar si la l√≠nea contiene la placa
            for (String dato : datos) {
                if (dato.trim().equals(placa.trim())) {
                    // Si se encuentra la placa, retornar el correo (asumiendo que el correo est√° en la posici√≥n 5)
                    return datos[5].trim(); // Devuelve el correo en la posici√≥n 5
                }
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    // Si no se encuentra la placa, retornar null
    return null;
}
    
    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuRevisarParqueo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuRevisarParqueo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuRevisarParqueo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuRevisarParqueo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuRevisarParqueo(inspector, parqueo).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMultar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> comboBoxEspaciosOcupados;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelCarro;
    private javax.swing.JLabel jLabelEstadoPago;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
